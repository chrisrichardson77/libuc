
CMAKE_MINIMUM_REQUIRED (VERSION 2.8.2)

PROJECT(uc)

OPTION(BUILD_EXAMPLES "Build example programs" OFF)

#SET(CMAKE_CXX_FLAGS "-fPIC -Wall")

INCLUDE(version.cmake)

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

FIND_PACKAGE(MySQL)
FIND_PACKAGE(Sqlite3)
FIND_PACKAGE(FLEX)
FIND_PACKAGE(CURL REQUIRED)

SET(${PROJECT_NAME}_SRCS
	src/buffer.cpp
	src/buffer_curl.cpp
	src/buffer_util.cpp
	src/string_util.cpp
	src/uccontract.cpp
	src/uc_curl.cpp
	src/ucdb.cpp
	src/ucio.cpp
	src/ucoder_bin.cpp
	src/ucoder_ini.cpp
	src/ucontainer.cpp
	src/uc_web.cpp
	flex/json_parser.lex
	${CMAKE_BINARY_DIR}/ucoder_json.cpp # This file is generated by the build
)

# Flex
# If we found the flex command, generate ucoder_json.cpp from ucoder_json.flex
# otherwise, use the fallback (which has perhaps incorrectly been under revision control
# throughout project history)
IF (FLEX_FOUND)
	MESSAGE(STATUS "Flex found: ucoder_json will be generated") 
	FLEX_TARGET(flex_json flex/json_parser.lex ${CMAKE_BINARY_DIR}/ucoder_json.cpp)
ELSE (FLEX_FOUND)
	MESSAGE(WARNING "Flex not found: will use fallback 'flex/ucoder_json.cpp.fallback'")
	CONFIGURE_FILE(flex/ucoder_json.cpp.fallback ${CMAKE_BINARY_DIR}/ucoder_json.cpp COPY_ONLY)
ENDIF (FLEX_FOUND)

# MySql integration
IF (MYSQL_FOUND)
	MESSAGE(STATUS "Found MySQL: ${MYSQL_LIBRARY}")

	SET(${PROJECT_NAME}_SRCS ${${PROJECT_NAME}_SRCS} ucmysql.cpp)

	INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})
	SET(${PROJECT_NAME}_LIBS ${${PROJECT_NAME}_LIBS} ${MYSQL_LIBRARIES})
ELSE ()
	MESSAGE(STATUS "MySql not found - skipping support.")
ENDIF ()

# SqLite integration
IF (SQLITE3_FOUND)
#	MESSAGE(STATUS "Found Sqlite3: ${SQLITE3_LIBRARY}") # For some reason the FIND_PACKAGE SQLITE3_FIND_QUIETLY switch doesn't seem to work and this message will already have been displayed

	SET(${PROJECT_NAME}_SRCS ${${PROJECT_NAME}_SRCS} ucsqlite.cpp)

	INCLUDE_DIRECTORIES(${SQLITE_INCLUDE_DIR})
	SET(${PROJECT_NAME}_LIBS ${${PROJECT_NAME}_LIBS} ${SQLITE_LIBRARIES})
ELSE ()
	MESSAGE(STATUS "SqLite not found - skipping support.")
ENDIF ()

INCLUDE_DIRECTORIES(include)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_SRCS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
	VERSION "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}"
	OUTPUT_NAME ${PROJECT_NAME}
	CLEAN_DIRECT_OUTPUT 1)
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION lib)
install(DIRECTORY include/ DESTINATION include FILES_MATCHING PATTERN "*.h")

IF (BUILD_EXAMPLES)
	SET(EXAMPLE_SRCS
		examples/example.cpp
	)
	
	ADD_EXECUTABLE(example ${EXAMPLE_SRCS})
	TARGET_LINK_LIBRARIES(example ${PROJECT_NAME} ${CURL_LIBRARIES})
	
	SET(CONTRACT_EXAMPLE_SRCS
		examples/contract_example.cpp
	)	
	ADD_EXECUTABLE(contract_example ${CONTRACT_EXAMPLE_SRCS})
	TARGET_LINK_LIBRARIES(contract_example ${PROJECT_NAME} ${CURL_LIBRARIES})
	
	CONFIGURE_FILE(examples/contract.json ${CMAKE_BINARY_DIR}/contract.json COPY_ONLY)
	CONFIGURE_FILE(examples/data.json ${CMAKE_BINARY_DIR}/data.json COPY_ONLY)
ENDIF()
